// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: lobby.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LobbyService_GetLobby_FullMethodName    = "/lobby.LobbyService/GetLobby"
	LobbyService_CreateLobby_FullMethodName = "/lobby.LobbyService/CreateLobby"
	LobbyService_UpdateLobby_FullMethodName = "/lobby.LobbyService/UpdateLobby"
	LobbyService_DeleteLobby_FullMethodName = "/lobby.LobbyService/DeleteLobby"
)

// LobbyServiceClient is the client API for LobbyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyServiceClient interface {
	GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*Lobby, error)
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
	UpdateLobby(ctx context.Context, in *UpdateLobbyRequest, opts ...grpc.CallOption) (*UpdateLobbyResponse, error)
	DeleteLobby(ctx context.Context, in *DeleteLobbyRequest, opts ...grpc.CallOption) (*DeleteLobbyResponse, error)
}

type lobbyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyServiceClient(cc grpc.ClientConnInterface) LobbyServiceClient {
	return &lobbyServiceClient{cc}
}

func (c *lobbyServiceClient) GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*Lobby, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lobby)
	err := c.cc.Invoke(ctx, LobbyService_GetLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, LobbyService_CreateLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) UpdateLobby(ctx context.Context, in *UpdateLobbyRequest, opts ...grpc.CallOption) (*UpdateLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLobbyResponse)
	err := c.cc.Invoke(ctx, LobbyService_UpdateLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) DeleteLobby(ctx context.Context, in *DeleteLobbyRequest, opts ...grpc.CallOption) (*DeleteLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLobbyResponse)
	err := c.cc.Invoke(ctx, LobbyService_DeleteLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServiceServer is the server API for LobbyService service.
// All implementations must embed UnimplementedLobbyServiceServer
// for forward compatibility.
type LobbyServiceServer interface {
	GetLobby(context.Context, *GetLobbyRequest) (*Lobby, error)
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
	UpdateLobby(context.Context, *UpdateLobbyRequest) (*UpdateLobbyResponse, error)
	DeleteLobby(context.Context, *DeleteLobbyRequest) (*DeleteLobbyResponse, error)
	mustEmbedUnimplementedLobbyServiceServer()
}

// UnimplementedLobbyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLobbyServiceServer struct{}

func (UnimplementedLobbyServiceServer) GetLobby(context.Context, *GetLobbyRequest) (*Lobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLobby not implemented")
}
func (UnimplementedLobbyServiceServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedLobbyServiceServer) UpdateLobby(context.Context, *UpdateLobbyRequest) (*UpdateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLobby not implemented")
}
func (UnimplementedLobbyServiceServer) DeleteLobby(context.Context, *DeleteLobbyRequest) (*DeleteLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLobby not implemented")
}
func (UnimplementedLobbyServiceServer) mustEmbedUnimplementedLobbyServiceServer() {}
func (UnimplementedLobbyServiceServer) testEmbeddedByValue()                      {}

// UnsafeLobbyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServiceServer will
// result in compilation errors.
type UnsafeLobbyServiceServer interface {
	mustEmbedUnimplementedLobbyServiceServer()
}

func RegisterLobbyServiceServer(s grpc.ServiceRegistrar, srv LobbyServiceServer) {
	// If the following call pancis, it indicates UnimplementedLobbyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LobbyService_ServiceDesc, srv)
}

func _LobbyService_GetLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).GetLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_GetLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).GetLobby(ctx, req.(*GetLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_UpdateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).UpdateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_UpdateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).UpdateLobby(ctx, req.(*UpdateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_DeleteLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).DeleteLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_DeleteLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).DeleteLobby(ctx, req.(*DeleteLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LobbyService_ServiceDesc is the grpc.ServiceDesc for LobbyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LobbyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lobby.LobbyService",
	HandlerType: (*LobbyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLobby",
			Handler:    _LobbyService_GetLobby_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _LobbyService_CreateLobby_Handler,
		},
		{
			MethodName: "UpdateLobby",
			Handler:    _LobbyService_UpdateLobby_Handler,
		},
		{
			MethodName: "DeleteLobby",
			Handler:    _LobbyService_DeleteLobby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lobby.proto",
}
